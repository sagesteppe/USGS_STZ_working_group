geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landuse),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Seed Zone:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse Sieve') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15",
label = "NLCD") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15",
label = "Land Management") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15",
label = "Historic Seeding")
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landuse),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Seed Zone:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse Sieve') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15",
label = "NLCD") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15",
label = "Land Management") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15",
label = "Historic Seeding")
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landuse),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Seed Zone:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse Sieve') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15", # lowest sieve
label = "NLCD") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15", # middle sieve
label = "Land Management") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15", # upper sieve
label = "Historic Seeding")
r_plot
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landuse),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Seed Zone:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse Sieve') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15", # lowest sieve
label = "Historic Seeding") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15", # middle sieve
label = "NLCD") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15", # upper sieve
label = "Land Cover")
r_plot
36/100
3.6*10
3.6*8
3.6*7
dat <- data.frame(
matrix(data = c(
sample(0:1, size = 36, replace = T, prob = c(0.25, 0.75)),
sample(0:1, size = 36, replace = T, prob = c(0.2, 0.80)),
sample(0:1, size = 36, replace = T, prob = c(0.15, 0.85))
),
ncol = 3)
)
rm(focus)
# combine our dummy data with some dummy coordinates, which will become points
# in the x and y direction. We will buffer out the points to turn them into
# raster tiles.
sf_lyrs <- cbind(
dat,
x = rep(1:6, each = 6),
y = rep(1:6) # automatically recycles
) |>
data.frame() |>
sf::st_as_sf(coords = c('x', 'y'), remove = FALSE) |>
sf::st_buffer(0.5, endCapStyle = 'SQUARE') |>
dplyr::mutate(across(landuse:focus, ~ factor(.x)))
dat <- data.frame(
matrix(data = c(
sample(0:1, size = 36, replace = T, prob = c(0.25, 0.75)),
sample(0:1, size = 36, replace = T, prob = c(0.2, 0.80)),
sample(0:1, size = 36, replace = T, prob = c(0.15, 0.85))
),
ncol = 3)
)
dat <- data.frame(
matrix(data = c(
sample(0:1, size = 36, replace = T, prob = c(0.25, 0.75)),
sample(0:1, size = 36, replace = T, prob = c(0.2, 0.80)),
sample(0:1, size = 36, replace = T, prob = c(0.15, 0.85))
),
ncol = 3)
)
focus <- apply(dat, MARGIN = 1, min)
dat <- cbind(dat, focus) |>
setNames(c('landcover', 'nlcd', 'seeded', 'focus'))
rm(focus)
# combine our dummy data with some dummy coordinates, which will become points
# in the x and y direction. We will buffer out the points to turn them into
# raster tiles.
sf_lyrs <- cbind(
dat,
x = rep(1:6, each = 6),
y = rep(1:6) # automatically recycles
) |>
data.frame() |>
sf::st_as_sf(coords = c('x', 'y'), remove = FALSE) |>
sf::st_buffer(0.5, endCapStyle = 'SQUARE') |>
dplyr::mutate(across(landuse:focus, ~ factor(.x)))
# combine our dummy data with some dummy coordinates, which will become points
# in the x and y direction. We will buffer out the points to turn them into
# raster tiles.
sf_lyrs <- cbind(
dat,
x = rep(1:6, each = 6),
y = rep(1:6) # automatically recycles
) |>
data.frame() |>
sf::st_as_sf(coords = c('x', 'y'), remove = FALSE) |>
sf::st_buffer(0.5, endCapStyle = 'SQUARE') |>
dplyr::mutate(across(landcover:focus, ~ factor(.x)))
rm(dat)
# create a specified palette for our classified layers s
cols <- c("0" = 'black', "1" = 'white')
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landuse),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Seed Zone:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse Sieve') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15", # lowest sieve
label = "Historic Seeding") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15", # middle sieve
label = "NLCD") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15", # upper sieve
label = "Land Cover")
rotate_sf <- function(data, x_add = 0, y_add = 0) {
shear_matrix <- function (x) {
matrix(c(2, 1.2, 0, 1), 2, 2)
}
rotate_matrix <- function(x) {
matrix(c(cos(x), sin(x), -sin(x), cos(x)), 2, 2)
}
data %>%
dplyr::mutate(
geometry =
.$geometry * shear_matrix() * rotate_matrix(pi / 20) + c(x_add, y_add)
)
}
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landcover),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Seed Zone:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse Sieve') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15", # lowest sieve
label = "Historic Seeding") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15", # middle sieve
label = "NLCD") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15", # upper sieve
label = "Land Cover")
r_plot
set.seed(12)
dat <- data.frame(
matrix(data = c(
sample(0:1, size = 36, replace = T, prob = c(0.25, 0.75)),
sample(0:1, size = 36, replace = T, prob = c(0.2, 0.80)),
sample(0:1, size = 36, replace = T, prob = c(0.15, 0.85))
),
ncol = 3)
)
focus <- apply(dat, MARGIN = 1, min)
dat <- cbind(dat, focus) |>
setNames(c('landcover', 'nlcd', 'seeded', 'focus'))
rm(focus)
# combine our dummy data with some dummy coordinates, which will become points
# in the x and y direction. We will buffer out the points to turn them into
# raster tiles.
sf_lyrs <- cbind(
dat,
x = rep(1:6, each = 6),
y = rep(1:6) # automatically recycles
) |>
data.frame() |>
sf::st_as_sf(coords = c('x', 'y'), remove = FALSE) |>
sf::st_buffer(0.5, endCapStyle = 'SQUARE') |>
dplyr::mutate(across(landcover:focus, ~ factor(.x)))
rm(dat)
# create a specified palette for our classified layers s
cols <- c("0" = 'black', "1" = 'white')
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landcover),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Seed Zone:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse Sieve') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15", # lowest sieve
label = "Historic Seeding") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15", # middle sieve
label = "NLCD") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15", # upper sieve
label = "Land Cover")
r_plot
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landcover),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Suitable:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse Sieve') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15", # lowest sieve
label = "Historic Seeding") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15", # middle sieve
label = "NLCD") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15", # upper sieve
label = "Land Cover")
r_plot
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landcover),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Suitable:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Landuse `Sieve`') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15", # lowest sieve
label = "Historic Seeding") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15", # middle sieve
label = "NLCD") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15", # upper sieve
label = "Land Cover")
r_plot
# create the plot using the rotate_sf function.
r_plot <- ggplot() +
geom_sf(data = rotate_sf(sf_lyrs), # bottom layer
aes(fill = focus)) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 7), # lower layer
aes(fill = seeded), alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 14), # middle layer
aes(fill = nlcd),  alpha = .7) +
geom_sf(data = rotate_sf(sf_lyrs, y_add = 21), # uppermost layer, y_add relative to base
aes(fill = landcover),  alpha = .7) +
scale_fill_manual(values = cols, name = 'Suitable:') +
theme_void() +
theme(
legend.position="bottom",
plot.title = element_text(hjust = 0.5)) +
labs(title = 'Land use `Sieve`') +
annotate("text", x = 18, y = -1.5, size=5, color="gray15", label = "Suitable Areas") +
annotate("text", x = 18, y = 5, size=3.75, color="gray15", # lowest sieve
label = "Historic Seeding") +
annotate("text", x = 18, y = 12, size=3.75, color="gray15", # middle sieve
label = "NLCD") +
annotate("text", x = 18, y = 19, size=3.75, color="gray15", # upper sieve
label = "Land Cover")
r_plot
ggsave('../figures/EnvironmentalSieve.png', r_plot, bg = 'transparent',
dpi = 300, units = 'in', height = 5, width = 3.5)
library(sf)
st_read('../data/CurrentZones.gpkg')
st_read('../data/CurrentZones.gpkg', quiet = T)
st_read('../data/ClimateShiftedZones.gpkg', quiet = T)
st_read('../data/CurrentZones.gpkg', quiet = T)
st_read('../data/ClimateShiftedZones.gpkg', quiet = T)
st_read('../data/CurrentZones.gpkg', quiet = T)
st_read('../data/ClimateShiftedZones.gpkg', quiet = T) |>
mutate(ID = c('Western', 'East', 'Central', 'Northern'))
sz_current <- st_read('../data/CurrentZones.gpkg', quiet = T)
sz_forecast <- st_read('../data/ClimateShiftedZones.gpkg', quiet = T) |>
mutate(ID = c('Western', 'East', 'Central', 'Northern'))
library(rmapshaper
)
sz_current <- st_read('../data/CurrentZones.gpkg', quiet = T)
sz_forecast <- st_read('../data/ClimateShiftedZones.gpkg', quiet = T) |>
mutate(ID = c('Western', 'East', 'Central', 'Northern'))
st_simplify(sz_forecast, dTolerance = 50, preserveTopology = TRUE)
obb <- st_simplify(sz_forecast, dTolerance = 50, preserveTopology = TRUE)
ggplot() +
geom_sf(data = sz_forecast) +
geom_sf(data = obb)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb, color =)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb, fill = NA, color = 'red')
obb <- st_simplify(sz_forecast, preserveTopology = TRUE)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb, fill = NA, color = 'red')
?st_simplify
obb <- st_simplify(sz_forecast, dTolerance = 10000, preserveTopology = TRUE)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb, fill = NA, color = 'red')
sz_current <- st_read('../data/CurrentZones.gpkg', quiet = T) |>
sf::st_transform(5070)
sz_forecast <- st_read('../data/ClimateShiftedZones.gpkg', quiet = T) |>
mutate(ID = c('Western', 'East', 'Central', 'Northern'))|>
sf::st_transform(5070)
st_buffer(sz_forecast, 5000)
sz_forecast <- st_buffer(sz_forecast, 5000)
obb <- st_simplify(sz_forecast, dTolerance = 10000, preserveTopology = TRUE)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb, fill = NA, color = 'red')
obb <- st_simplify(sz_forecast, dTolerance = 5000, preserveTopology = TRUE)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb, fill = NA, color = 'red')
sz_forecast <- st_buffer(sz_forecast, 5000)
obb <- st_simplify(sz_forecast, dTolerance = 5000, preserveTopology = TRUE)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb, fill = NA, color = 'red')
sz_forecast <- st_buffer(sz_forecast, 5000)
ggplot() +
geom_sf(data = sz_forecast, fill = NA) +
geom_sf(data = obb, fill = NA, color = 'red')
ggplot() +
geom_sf(data = sz_forecast, fill = NA)
sz_current <- st_buffer(sz_current, 5000)
ggplot() +
geom_sf(data = sz_forecast, fill = NA)
ggplot() +
geom_sf(data = sz_forecast, fill = NA)  +
geom_sf(data = sz_current, fill = NA)
ggplot() +
geom_sf(data = sz_forecast, fill = NA, color = 'red')  +
geom_sf(data = sz_current, fill = NA)
st_bbox(st_union(sz_forecast, sz_current))
st_sample(
st_bbox(
st_union(sz_forecast, sz_current)
),
5000
)
pts <- st_sample(
st_bbox(
st_union(sz_forecast, sz_current)
),
5000
)
sf::st_nearest_feature(pts, sz_current)
sz_current$ID
sf::st_nearest_feature(pts, sz_current)[sz_current$ID]
sz_current$ID
sf::st_nearest_feature(pts, sz_current)
pts_current <- bind_cols(sf::st_nearest_feature(pts, sz_current) pts)
pts_current <- bind_cols(sf::st_nearest_feature(pts, sz_current), pts)
View(pts)
pts <- st_sample(
st_bbox(
st_union(sz_forecast, sz_current)
),
5000
)
pts
pts <- st_sample(
st_bbox(
st_union(sz_forecast, sz_current)
),
5000
) |>
st_as_sf()
pts_current <- bind_cols(sf::st_nearest_feature(pts, sz_current), pts)
pts_current
pts_current <- bind_cols(Poly = sf::st_nearest_feature(pts, sz_current), pts)
pts_current
pts_current <- bind_cols(Poly = sf::st_nearest_feature(pts, sz_current), geom = pts)
pts_current
pts_current <- bind_cols(
Poly = sf::st_nearest_feature(pts, sz_current),
geom = pts
)
pts_current
View(pts_current)
pts
pts <- st_sample(
st_bbox(
st_union(sz_forecast, sz_current)
),
5000
) |>
st_as_sf()
pts_current <- bind_cols(
Poly = sf::st_nearest_feature(pts, sz_current),
geom = pts
)
sf::st_nearest_feature(pts, sz_current)
pts_current <- bind_cols(
Poly = sz_current$ID[sf::st_nearest_feature(pts, sz_current)],
geom = pts
)
pts_current
ggplot() +
geom_sf(data = pts_current, aes(color = Poly))
pts_current
pts_current <- bind_cols(
Poly = sz_current$ID[sf::st_nearest_feature(pts, sz_current)],
geom = pts
) |> st_as_sf()
ggplot() +
geom_sf(data = pts_current, aes(color = Poly))
pts <- st_sample(
st_bbox(
st_union(sz_forecast, sz_current)
),
7500
) |>
st_as_sf()
pts_current <- bind_cols(
Poly = sz_current$ID[sf::st_nearest_feature(pts, sz_current)],
geom = pts
) |> st_as_sf()
ggplot() +
geom_sf(data = pts_current, aes(color = Poly))
